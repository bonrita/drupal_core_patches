diff --git a/core/lib/Drupal/Component/DependencyInjection/Dumper/OptimizedPhpArrayDumper.php b/core/lib/Drupal/Component/DependencyInjection/Dumper/OptimizedPhpArrayDumper.php
index 977fc2c8e9..0fbed2c6d9 100644
--- a/core/lib/Drupal/Component/DependencyInjection/Dumper/OptimizedPhpArrayDumper.php
+++ b/core/lib/Drupal/Component/DependencyInjection/Dumper/OptimizedPhpArrayDumper.php
@@ -3,6 +3,7 @@
 namespace Drupal\Component\DependencyInjection\Dumper;
 
 use Drupal\Component\Utility\Crypt;
+use Symfony\Component\DependencyInjection\Argument\ServiceClosureArgument;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\DependencyInjection\Definition;
 use Symfony\Component\DependencyInjection\Parameter;
@@ -422,6 +423,12 @@ protected function dumpValue($value) {
     elseif ($value instanceof Expression) {
       throw new RuntimeException('Unable to use expressions as the Symfony ExpressionLanguage component is not installed.');
     }
+    elseif ($value instanceof ServiceClosureArgument) {
+      $values = $value->getValues();
+      /** @var Reference $item */
+      $item = reset($values);
+      return $this->getReferenceCall((string) $item, $item);
+    }
     elseif (is_object($value)) {
       // Drupal specific: Instantiated objects have a _serviceId parameter.
       if (isset($value->_serviceId)) {
diff --git a/core/tests/Drupal/Tests/Component/DependencyInjection/Dumper/OptimizedPhpArrayDumperTest.php b/core/tests/Drupal/Tests/Component/DependencyInjection/Dumper/OptimizedPhpArrayDumperTest.php
index e1560787ac..ed134aeae9 100644
--- a/core/tests/Drupal/Tests/Component/DependencyInjection/Dumper/OptimizedPhpArrayDumperTest.php
+++ b/core/tests/Drupal/Tests/Component/DependencyInjection/Dumper/OptimizedPhpArrayDumperTest.php
@@ -9,6 +9,7 @@
 
   use Drupal\Component\Utility\Crypt;
   use PHPUnit\Framework\TestCase;
+  use Symfony\Component\DependencyInjection\Argument\ServiceClosureArgument;
   use Symfony\Component\DependencyInjection\Definition;
   use Symfony\Component\DependencyInjection\Reference;
   use Symfony\Component\DependencyInjection\Parameter;
@@ -194,6 +195,11 @@ public function getParametersDataProvider() {
           ['reference' => $this->getServiceCall('referenced_service')],
           TRUE,
         ],
+        [
+          ['reference' => new ServiceClosureArgument(new Reference('referenced_service'))],
+          ['reference' => $this->getServiceClosureCall('referenced_service')],
+          TRUE,
+        ],
       ];
     }
 
@@ -473,6 +479,13 @@ protected function getServiceCall($id, $invalid_behavior = ContainerInterface::E
       ];
     }
 
+    /**
+     * Helper function to return a service closure definition.
+     */
+    protected function getServiceClosureCall($id, $invalid_behavior = ContainerInterface::EXCEPTION_ON_INVALID_REFERENCE) {
+      return new ServiceClosureArgument(new Reference('referenced_service'));
+    }
+
     /**
      * Tests that references to aliases work correctly.
      *
